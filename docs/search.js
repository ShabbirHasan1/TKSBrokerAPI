window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "tksbrokerapi", "modulename": "tksbrokerapi", "type": "module", "doc": "<p></p>\n"}, {"fullname": "tksbrokerapi.TKSBrokerAPI", "modulename": "tksbrokerapi.TKSBrokerAPI", "type": "module", "doc": "<p><strong>TKSBrokerAPI</strong> is a python API to work with some methods of Tinkoff Open API using REST protocol.\nIt can view history, orders and market information. Also, you can open orders and trades.</p>\n\n<p>If you run this module as CLI program then it realizes simple logic: receiving a lot of options and execute one command.\n<strong>See examples</strong>: <a href=\"https://github.com/Tim55667757/TKSBrokerAPI/blob/master/README_EN.md#Usage-examples\">https://github.com/Tim55667757/TKSBrokerAPI/blob/master/README_EN.md#Usage-examples</a></p>\n\n<p><strong>Used constants are in the TKSEnums module</strong>: <a href=\"https://tim55667757.github.io/TKSBrokerAPI/docs/tksbrokerapi/TKSEnums.html\">https://tim55667757.github.io/TKSBrokerAPI/docs/tksbrokerapi/TKSEnums.html</a></p>\n\n<p>About Tinkoff Invest API: <a href=\"https://tinkoff.github.io/investAPI/\">https://tinkoff.github.io/investAPI/</a></p>\n\n<p>Tinkoff Invest API documentation: <a href=\"https://tinkoff.github.io/investAPI/swagger-ui/\">https://tinkoff.github.io/investAPI/swagger-ui/</a></p>\n"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.NanoToFloat", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "NanoToFloat", "type": "function", "doc": "<p>Convert number in nano-view mode with string parameter <code>units</code> and integer parameter <code>nano</code> to float view. Examples:</p>\n\n<p><code>NanoToFloat(units=\"2\", nano=500000000) -&gt; 2.5</code></p>\n\n<p><code>NanoToFloat(units=\"0\", nano=50000000) -&gt; 0.05</code></p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>units</strong>:  integer string or integer parameter that represents the integer part of number</li>\n<li><strong>nano</strong>:  integer string or integer parameter that represents the fractional part of number</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>float view of number</p>\n</blockquote>\n", "signature": "(units: str, nano: int) -> float", "funcdef": "def"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.FloatToNano", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "FloatToNano", "type": "function", "doc": "<p>Convert float number to nano-type view: dictionary with string <code>units</code> and integer <code>nano</code> parameters <code>{\"units\": \"string\", \"nano\": integer}</code>. Examples:</p>\n\n<p><code>FloatToNano(number=2.5) -&gt; {\"units\": \"2\", \"nano\": 500000000}</code></p>\n\n<p><code>FloatToNano(number=0.05) -&gt; {\"units\": \"0\", \"nano\": 50000000}</code></p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>number</strong>:  float number</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>nano-type view of number: <code>{\"units\": \"string\", \"nano\": integer}</code></p>\n</blockquote>\n", "signature": "(number: float) -> dict", "funcdef": "def"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.GetDatesAsString", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "GetDatesAsString", "type": "function", "doc": "<p>If <code>start=None</code>, <code>end=None</code> then return dates from yesterday to current time.\nIf <code>start=some_date_1</code>, <code>end=None</code> then return dates from <code>some_date_1</code> to current time.\nIf <code>start=some_date_1</code>, <code>end=some_date_2</code> then return dates from <code>some_date_1</code> to <code>some_date_2</code>.\nStart day may be negative integer numbers: <code>-1</code>, <code>-2</code>, <code>-3</code> - how many days ago.</p>\n\n<p>Also, you can use keywords for start if <code>dateEnd=None</code>:\n<code>today</code> (from 00:00:00 to current time),\n<code>yesterday</code> (-1 day from 00:00:00 to 23:59:59),\n<code>week</code> (-7 day from 00:00:00 to current date and time),\n<code>month</code> (-30 day from 00:00:00 to current date and time),\n<code>year</code> (-365 day from 00:00:00 to current date and time),</p>\n\n<p>User dates format must be like: <code>%Y-%m-%d</code>, e.g. <code>2020-02-03</code> (3 Feb, 2020).</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>tuple with 2 strings <code>(start, end)</code> dates in UTC ISO time format <code>%Y-%m-%dT%H:%M:%SZ</code> for OpenAPI.\n           Example: <code>(\"2022-06-01T00:00:00Z\", \"2022-06-20T23:59:59Z\")</code></p>\n</blockquote>\n", "signature": "(start: str = None, end: str = None) -> tuple", "funcdef": "def"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer", "type": "class", "doc": "<p>This class implements methods to work with Tinkoff broker server.</p>\n\n<p>Examples to work with API: <a href=\"https://tinkoff.github.io/investAPI/swagger-ui/\">https://tinkoff.github.io/investAPI/swagger-ui/</a></p>\n\n<p>About <code>token</code>: <a href=\"https://tinkoff.github.io/investAPI/token/\">https://tinkoff.github.io/investAPI/token/</a></p>\n"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.__init__", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.__init__", "type": "function", "doc": "<p>Main class init.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>token</strong>:  Bearer token for Tinkoff Invest API. It can be set from environment variable <code>TKS_API_TOKEN</code>.</li>\n<li><strong>accountId</strong>:  string with user's numeric account ID in Tinkoff Broker. It can be found in broker's reports.\n              Also, this variable can be set from environment variable <code>TKS_ACCOUNT_ID</code>.</li>\n<li><strong>iList</strong>:  dictionary with raw data about shares, currencies, bonds, etfs and futures from broker server.\n          At first time, when class init, <code>Listing()</code> method auto-update this variable, or you can use dump file.\n          For future use, you can save this variable and use as <code>iList</code> to avoid permanent downloads\n          from the server. Also, you can try <code>DumpInstruments()</code> method.</li>\n<li><strong>useCache</strong>:  use default cache file <code>dump.json</code> with raw data to use instead of <code>iList</code> if <code>iList</code> set as <code>None</code>.\n             True by default. Cache is auto-update if new day has come.\n             If <code>iList</code> is not <code>None</code> then it value has higher priority than <code>dump.json</code> and <code>useCache</code>.\n             If you don't want to use cache and always updates raw data then set <code>useCache=False</code>.</li>\n</ul>\n", "signature": "(\n    self,\n    token: str,\n    accountId: str = None,\n    iList: dict = None,\n    useCache: bool = True\n)", "funcdef": "def"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.aliases", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.aliases", "type": "variable", "doc": "<p>Some aliases instead official tickers. See <code>TKSEnums.TKS_TICKER_ALIASES</code></p>\n"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.ticker", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.ticker", "type": "variable", "doc": "<p>String with ticker, e.g. <code>GOOGL</code>. Use alias for <code>USD000UTSTOM</code> simple as <code>USD</code>, <code>EUR_RUB__TOM</code> as <code>EUR</code> etc. More tickers aliases here: <code>TKSEnums.TKS_TICKER_ALIASES</code>.</p>\n"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.figi", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.figi", "type": "variable", "doc": "<p>String with FIGI, e.g. ticker <code>GOOGL</code> has FIGI <code>BBG009S39JX6</code></p>\n"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.depth", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.depth", "type": "variable", "doc": "<p>Depth of Market (DOM) can be &gt;= 1. Default: 1. It used with <code>--price</code> key to showing DOM with current prices for givens ticker or FIGI.</p>\n"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.server", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.server", "type": "variable", "doc": "<p>Tinkoff REST API server for real trade operations. Default: <a href=\"https://invest-public-api.tinkoff.ru/rest\">https://invest-public-api.tinkoff.ru/rest</a></p>\n\n<p>See also: <a href=\"https://tinkoff.github.io/investAPI/#tinkoff-invest-api_1\">https://tinkoff.github.io/investAPI/#tinkoff-invest-api_1</a></p>\n"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.timeout", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.timeout", "type": "variable", "doc": "<p>Server operations timeout in seconds. Default: 15</p>\n"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.headers", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.headers", "type": "variable", "doc": "<p>Headers which send in every request to broker server. Default: <code>{\"Content-Type\": \"application/json\", \"accept\": \"application/json\", \"Authorization\": \"Bearer {token}\"}</code></p>\n"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.body", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.body", "type": "variable", "doc": "<p>Request body which send to broker server. Default: <code>None</code></p>\n"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.historyLength", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.historyLength", "type": "variable", "doc": "<p>How many candles returns if candles history request. For example, if <code>historyInterval=\"hour\"</code> and <code>historyLength=24</code> it means: \"give me last 24 hours\". Must be &gt;=1. Default: 24</p>\n"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.historyInterval", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.historyInterval", "type": "variable", "doc": "<p>Interval string for Tinkoff API (see: <code>TKSEnums.TKS_TIMEFRAMES</code>). Available values are <code>\"1min\"</code>, <code>\"2min\"</code>, <code>\"3min\"</code>, <code>\"5min\"</code>, <code>\"10min\"</code>, <code>\"15min\"</code>, <code>\"30min\"</code>, <code>\"hour\"</code>, <code>\"day\"</code>, <code>\"week\"</code>, <code>\"month\"</code>. Default: <code>\"hour\"</code></p>\n"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.instrumentsFile", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.instrumentsFile", "type": "variable", "doc": "<p>Filename where full broker's instruments list will be saved. Default: <code>instruments.md</code></p>\n"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.searchResultsFile", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.searchResultsFile", "type": "variable", "doc": "<p>Filename with all found instruments searched by part of its ticker, FIGI or name. Default: <code>search-results.md</code></p>\n"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.pricesFile", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.pricesFile", "type": "variable", "doc": "<p>Filename where prices of selected instruments will be saved. Default: <code>prices.md</code></p>\n"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.overviewFile", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.overviewFile", "type": "variable", "doc": "<p>Filename where current portfolio, open trades and orders will be saved. Default: <code>overview.md</code></p>\n"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.reportFile", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.reportFile", "type": "variable", "doc": "<p>Filename where history of deals and trade statistics will be saved. Default: <code>deals.md</code></p>\n"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.historyFile", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.historyFile", "type": "variable", "doc": "<p>Full path to .csv output file where history candles will be saved. Default: <code>None</code>, mean that returns only pandas dataframe.</p>\n"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.iListDumpFile", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.iListDumpFile", "type": "variable", "doc": "<p>Filename where raw data about shares, currencies, bonds, etfs and futures will be stored. Default: <code>dump.json</code></p>\n"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.iList", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.iList", "type": "variable", "doc": "<p>Dictionary with raw data about shares, currencies, bonds, etfs and futures from broker server. Auto-updating.</p>\n\n<p>See also: <code>Listing()</code> and <code>DumpInstruments()</code>.</p>\n"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.SendAPIRequest", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.SendAPIRequest", "type": "function", "doc": "<p>Send GET or POST request to broker server and receive JSON object.</p>\n\n<p>self.header: must be define with dictionary of headers.\nself.body: if define then used as request body. None by default.\nself.timeout: global request timeout, 15 seconds by default.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>url</strong>:  url with REST request.</li>\n<li><strong>reqType</strong>:  send \"GET\" or \"POST\" request. \"GET\" by default.</li>\n<li><strong>retry</strong>:  how many times retry after first request if an error occurred.</li>\n<li><strong>pause</strong>:  sleep time in seconds between retries.</li>\n<li><strong>debug</strong>:  if <code>True</code> then print more debug information.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>response JSON (dictionary) from broker.</p>\n</blockquote>\n", "signature": "(\n    self,\n    url: str,\n    reqType: str = 'GET',\n    retry: int = 3,\n    pause: int = 5,\n    debug: bool = False\n) -> dict", "funcdef": "def"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.Listing", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.Listing", "type": "function", "doc": "<p>Gets JSON with raw data about shares, currencies, bonds, etfs and futures from broker server.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Dictionary with all available broker instruments: currencies, shares, bonds, etfs and futures.</p>\n</blockquote>\n", "signature": "(self) -> dict", "funcdef": "def"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.DumpInstruments", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.DumpInstruments", "type": "function", "doc": "<p>Receives and returns actual raw data about shares, currencies, bonds, etfs and futures from broker server\nusing <code>Listing()</code> method. If <code>iListDumpFile</code> string is not empty then also save information to this file.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>forceUpdate</strong>:  if <code>True</code> then at first updates data with <code>Listing()</code> method, otherwise just saves exist <code>iList</code>.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>serialized JSON formatted <code>str</code> with full data of instruments, also saved to the <code>--output</code> file.</p>\n</blockquote>\n", "signature": "(self, forceUpdate: bool = True) -> str", "funcdef": "def"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.ShowInstrumentInfo", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.ShowInstrumentInfo", "type": "function", "doc": "<p>Show information about instrument defined by json and print in Markdown format.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>iJSON</strong>:  json data of instrument, e.g. in code <code>iJSON = self.iList[\"Shares\"][self.ticker]</code></li>\n<li><strong>printInfo</strong>:  if <code>True</code> then also printing information about instrument and its current price.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>text in Markdown format with information about instrument.</p>\n</blockquote>\n", "signature": "(iJSON: dict, printInfo: bool = False) -> str", "funcdef": "def"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.SearchByTicker", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.SearchByTicker", "type": "function", "doc": "<p>Search and return raw broker's information about instrument by it's ticker.\n<code>ticker</code> must be define! If debug=True then print all debug messages.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>requestPrice</strong>:  if <code>False</code> then do not request current price of instrument (because this is long operation).</li>\n<li><strong>showInfo</strong>:  if <code>False</code> then do not run <code>ShowInstrumentInfo()</code> method and do not print info to the console.</li>\n<li><strong>debug</strong>:  if <code>True</code> then print all debug console messages.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>JSON formatted data with information about instrument.</p>\n</blockquote>\n", "signature": "(\n    self,\n    requestPrice: bool = False,\n    showInfo: bool = False,\n    debug: bool = False\n) -> dict", "funcdef": "def"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.SearchByFIGI", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.SearchByFIGI", "type": "function", "doc": "<p>Search and return raw broker's information about instrument by it's FIGI.\n<code>figi</code> must be define! If debug=True then print all debug messages.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>requestPrice</strong>:  if <code>False</code> then do not request current price of instrument (it's long operation).</li>\n<li><strong>showInfo</strong>:  if <code>False</code> then do not run <code>ShowInstrumentInfo()</code> method and do not print info to the console.</li>\n<li><strong>debug</strong>:  if <code>True</code> then print all debug console messages.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>JSON formatted data with information about instrument.</p>\n</blockquote>\n", "signature": "(\n    self,\n    requestPrice: bool = False,\n    showInfo: bool = False,\n    debug: bool = False\n) -> dict", "funcdef": "def"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.GetCurrentPrices", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.GetCurrentPrices", "type": "function", "doc": "<p>Get and show Depth of Market with current prices of the instrument. If an error occurred then returns an empty record:\n<code>{\"buy\": [], \"sell\": [], \"limitUp\": None, \"limitDown\": None, \"lastPrice\": None, \"closePrice\": None}</code>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>showPrice</strong>:  if <code>True</code> then print DOM.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>orders book dict with lists of current buy and sell prices: <code>{\"buy\": [{\"price\": x1, \"quantity\": y1, ...}], \"sell\": [....]}</code>.</p>\n</blockquote>\n", "signature": "(self, showPrice: bool = False) -> dict", "funcdef": "def"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.ShowInstrumentsInfo", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.ShowInstrumentsInfo", "type": "function", "doc": "<p>This method get and show information about all available broker instruments.\nIf <code>instrumentsFile</code> string is not empty then also save information to this file.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>showInstruments</strong>:  if <code>True</code> then print results to console, if <code>False</code> - print only to file.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>multi-string with all available broker instruments</p>\n</blockquote>\n", "signature": "(self, showInstruments: bool = False) -> str", "funcdef": "def"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.SearchInstruments", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.SearchInstruments", "type": "function", "doc": "<p>This method search and show information about instruments by part of its ticker, FIGI or name.\nIf <code>searchResultsFile</code> string is not empty then also save information to this file.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>pattern</strong>:  string with part of ticker, FIGI or instrument's name.</li>\n<li><strong>showResults</strong>:  if <code>True</code> then print results to console, if <code>False</code> - return list of result only.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>list of dictionaries with all found instruments.</p>\n</blockquote>\n", "signature": "(self, pattern: str, showResults: bool = False) -> dict", "funcdef": "def"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.GetListOfPrices", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.GetListOfPrices", "type": "function", "doc": "<p>This method get, maybe show and return prices of list of instruments. WARNING! This is potential long operation!\nSee limits: <a href=\"https://tinkoff.github.io/investAPI/limits/\">https://tinkoff.github.io/investAPI/limits/</a>\nIf <code>pricesFile</code> string is not empty then also save information to this file.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>instruments</strong>:  list of tickers or FIGIs.</li>\n<li><strong>showPrices</strong>:  if <code>True</code> then print to console, if <code>False</code> - print only to file.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>list of instruments looks like this: <code>iList = [{some ticker info, \"currentPrice\": {current prices}}, {...}, ...]</code>\n           One item is dict returned by <code>SearchByTicker()</code> or <code>SearchByFIGI()</code> methods.</p>\n</blockquote>\n", "signature": "(self, instruments: list = None, showPrices: bool = False) -> list", "funcdef": "def"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.RequestPortfolio", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.RequestPortfolio", "type": "function", "doc": "<p>Requesting current actual user's portfolio.\nREST API for user portfolio: <a href=\"https://tinkoff.github.io/investAPI/swagger-ui/#/OperationsService/OperationsService_GetPortfolio\">https://tinkoff.github.io/investAPI/swagger-ui/#/OperationsService/OperationsService_GetPortfolio</a></p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>dictionary with user's portfolio.</p>\n</blockquote>\n", "signature": "(self) -> dict", "funcdef": "def"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.RequestPositions", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.RequestPositions", "type": "function", "doc": "<p>Requesting current open positions in currencies and instruments.\nREST API for open positions: <a href=\"https://tinkoff.github.io/investAPI/swagger-ui/#/OperationsService/OperationsService_GetPositions\">https://tinkoff.github.io/investAPI/swagger-ui/#/OperationsService/OperationsService_GetPositions</a></p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>dictionary with open positions by instruments.</p>\n</blockquote>\n", "signature": "(self) -> dict", "funcdef": "def"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.RequestPendingOrders", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.RequestPendingOrders", "type": "function", "doc": "<p>Requesting current actual pending orders.\nREST API for pending (market) orders: <a href=\"https://tinkoff.github.io/investAPI/swagger-ui/#/OrdersService/OrdersService_GetOrders\">https://tinkoff.github.io/investAPI/swagger-ui/#/OrdersService/OrdersService_GetOrders</a></p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>list of dictionaries with pending orders.</p>\n</blockquote>\n", "signature": "(self) -> list", "funcdef": "def"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.RequestStopOrders", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.RequestStopOrders", "type": "function", "doc": "<p>Requesting current actual stop orders.\nREST API for opened stop-orders: <a href=\"https://tinkoff.github.io/investAPI/swagger-ui/#/StopOrdersService/StopOrdersService_GetStopOrders\">https://tinkoff.github.io/investAPI/swagger-ui/#/StopOrdersService/StopOrdersService_GetStopOrders</a></p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>list of dictionaries with stop orders.</p>\n</blockquote>\n", "signature": "(self) -> list", "funcdef": "def"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.Overview", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.Overview", "type": "function", "doc": "<p>Get portfolio: all open positions, orders and some statistics for defined accountId.\nIf <code>overviewFile</code> is define then also save information to file.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>showStatistics</strong>:  if <code>False</code> then only dictionary returns, if <code>True</code> then show more debug information.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>dictionary with client's raw portfolio and some statistics.</p>\n</blockquote>\n", "signature": "(self, showStatistics: bool = False) -> dict", "funcdef": "def"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.Deals", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.Deals", "type": "function", "doc": "<p>Returns history operations between two given dates.\nIf <code>reportFile</code> string is not empty then also save human-readable report.\nShows some statistical data of closed positions.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>start</strong>:  see docstring in <code>GetDatesAsString()</code> method</li>\n<li><strong>end</strong>:  see docstring in <code>GetDatesAsString()</code> method</li>\n<li><strong>printDeals</strong>:  if <code>True</code> then also print all records to the console.</li>\n<li><strong>showCancelled</strong>:  if <code>False</code> then remove information about cancelled operations from the deals report.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>original list of dictionaries with history of deals records from API (\"operations\" key):\n           <a href=\"https://tinkoff.github.io/investAPI/swagger-ui/#/OperationsService/OperationsService_GetOperations\">https://tinkoff.github.io/investAPI/swagger-ui/#/OperationsService/OperationsService_GetOperations</a>\n           and dictionary with custom stats: operations in different currencies, withdrawals, incomes etc.</p>\n</blockquote>\n", "signature": "(\n    self,\n    start: str = None,\n    end: str = None,\n    printDeals: bool = False,\n    showCancelled: bool = True\n) -> tuple", "funcdef": "def"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.History", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.History", "type": "function", "doc": "<p>This method returns last history candles of the current instrument defined by <code>ticker</code>.\nIf <code>historyFile</code> is not None then method save history to this file, otherwise return only pandas dataframe.\n<code>historyLength</code> define how many candles returns from past to current date.\n<code>historyInterval</code> define candle interval. Available values are strings: <code>\"1min\"</code>, <code>\"2min\"</code>, <code>\"3min\"</code>, <code>\"5min\"</code>,\n<code>\"10min\"</code>, <code>\"15min\"</code>, <code>\"30min\"</code>, <code>\"hour\"</code>, <code>\"day\"</code>, <code>\"week\"</code>, <code>\"month\"</code>. Default: <code>\"hour\"</code>.\nMaximum requested history date in the past: <code>1970.01.02 03:45</code></p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>onlyMissing</strong>:  if history file define then add only last missing candles, do not request all history length. False by default.\n                WARNING! History appends only from last candle to current time with replace last candle! Intervals must be similar!</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>pandas dataframe with prices history. Columns: <code>date</code>, <code>time</code>, <code>open</code>, <code>high</code>, <code>low</code>, <code>close</code>, <code>volume</code>.</p>\n</blockquote>\n", "signature": "(self, onlyMissing: bool = False)", "funcdef": "def"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.Trade", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.Trade", "type": "function", "doc": "<p>Universal method to create market order and make deal at the current price. Returns JSON data with response.\nIf <code>tp</code> or <code>sl</code> &gt; 0, then in additional will opens stop-orders with \"TP\" and \"SL\" flags for <code>stopType</code> parameter.</p>\n\n<p>See also: <code>Order()</code> docstring. More simple methods than <code>Trade()</code> are <code>Buy()</code> and <code>Sell()</code>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>operation</strong>:  string \"Buy\" or \"Sell\".</li>\n<li><strong>lots</strong>:  volume, integer count of lots &gt;= 1.</li>\n<li><strong>tp</strong>:  float &gt; 0, target price for stop-order with \"TP\" type. It used as take profit parameter <code>targetPrice</code> in <code>self.Order()</code>.</li>\n<li><strong>sl</strong>:  float &gt; 0, target price for stop-order with \"SL\" type. It used as stop loss parameter <code>targetPrice</code> in <code>self.Order()</code>.</li>\n<li><strong>expDate</strong>:  string \"Undefined\" by default or local date in future,\n            it is a string with format <code>%Y-%m-%d %H:%M:%S</code>.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>JSON with response from broker server.</p>\n</blockquote>\n", "signature": "(\n    self,\n    operation: str,\n    lots: int = 1,\n    tp: float = 0.0,\n    sl: float = 0.0,\n    expDate: str = 'Undefined'\n) -> dict", "funcdef": "def"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.Buy", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.Buy", "type": "function", "doc": "<p>More simple method than <code>Trade()</code>. Create <code>Buy</code> market order and make deal at the current price. Returns JSON data with response.\nIf <code>tp</code> or <code>sl</code> &gt; 0, then in additional will opens stop-orders with \"TP\" and \"SL\" flags for <code>stopType</code> parameter.</p>\n\n<p>See also: <code>Order()</code> and <code>Trade()</code> docstrings.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>lots</strong>:  volume, integer count of lots &gt;= 1.</li>\n<li><strong>tp</strong>:  float &gt; 0, take profit price of stop-order.</li>\n<li><strong>sl</strong>:  float &gt; 0, stop loss price of stop-order.</li>\n<li><strong>expDate</strong>:  it's a local date in future.\n            String has a format like this: <code>%Y-%m-%d %H:%M:%S</code>.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>JSON with response from broker server.</p>\n</blockquote>\n", "signature": "(\n    self,\n    lots: int = 1,\n    tp: float = 0.0,\n    sl: float = 0.0,\n    expDate: str = 'Undefined'\n) -> dict", "funcdef": "def"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.Sell", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.Sell", "type": "function", "doc": "<p>More simple method than <code>Trade()</code>. Create <code>Sell</code> market order and make deal at the current price. Returns JSON data with response.\nIf <code>tp</code> or <code>sl</code> &gt; 0, then in additional will opens stop-orders with \"TP\" and \"SL\" flags for <code>stopType</code> parameter.</p>\n\n<p>See also: <code>Order()</code> and <code>Trade()</code> docstrings.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>lots</strong>:  volume, integer count of lots &gt;= 1.</li>\n<li><strong>tp</strong>:  float &gt; 0, take profit price of stop-order.</li>\n<li><strong>sl</strong>:  float &gt; 0, stop loss price of stop-order.</li>\n<li><strong>expDate</strong>:  it's a local date in future.\n            String has a format like this: <code>%Y-%m-%d %H:%M:%S</code>.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>JSON with response from broker server.</p>\n</blockquote>\n", "signature": "(\n    self,\n    lots: int = 1,\n    tp: float = 0.0,\n    sl: float = 0.0,\n    expDate: str = 'Undefined'\n) -> dict", "funcdef": "def"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.CloseTrades", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.CloseTrades", "type": "function", "doc": "<p>Close position of given instruments.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>tickers</strong>:  tickers list of instruments that must be closed.</li>\n<li><strong>overview</strong>:  pre-received dictionary with open trades, returned by <code>Overview()</code> method.\n             This avoids unnecessary downloading data from the server.</li>\n</ul>\n", "signature": "(self, tickers: list, overview: dict = None) -> None", "funcdef": "def"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.CloseAllTrades", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.CloseAllTrades", "type": "function", "doc": "<p>Close all positions of given instruments with defined type.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>iType</strong>:  type of the instruments that be closed, it must be one of supported types in TKS_INSTRUMENTS list.</li>\n<li><strong>overview</strong>:  pre-received dictionary with open trades, returned by <code>Overview()</code> method.\n             This avoids unnecessary downloading data from the server.</li>\n</ul>\n", "signature": "(self, iType: str, overview: dict = None) -> None", "funcdef": "def"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.Order", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.Order", "type": "function", "doc": "<p>Universal method to create market or limit orders with all available parameters.\nSee more simple methods: <code>BuyLimit()</code>, <code>BuyStop()</code>, <code>SellLimit()</code>, <code>SellStop()</code>.</p>\n\n<p>If orderType is \"Limit\" then create pending limit-order below current price if operation is \"Buy\" and above\ncurrent price if operation is \"Sell\". A limit order has no expiration date, it lasts until the end of the trading day.</p>\n\n<p>Warning! If you try to create limit-order above current price if \"Buy\" or below current price if \"Sell\"\nthen broker immediately open market order as you can do simple --buy or --sell operations!</p>\n\n<p>If orderType is \"Stop\" then creates stop-order with any direction \"Buy\" or \"Sell\".\nWhen current price will go up or down to target price value then broker opens a limit order.\nStop-order is opened with unlimited expiration date by default, or you can define expiration date with expDate parameter.</p>\n\n<p>Only one attempt and no retry for opens order. If network issue occurred you can create new request.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>operation</strong>:  string \"Buy\" or \"Sell\".</li>\n<li><strong>orderType</strong>:  string \"Limit\" or \"Stop\".</li>\n<li><strong>lots</strong>:  volume, integer count of lots &gt;= 1.</li>\n<li><strong>targetPrice</strong>:  target price &gt; 0. This is open trade price for limit order.</li>\n<li><strong>limitPrice</strong>:  limit price &gt;= 0. This parameter only makes sense for stop-order. If limitPrice = 0, then it set as targetPrice.\n               Broker will creates limit-order with price equal to limitPrice, when current price goes to target price of stop-order.</li>\n<li><strong>stopType</strong>:  string \"Limit\" by default. This parameter only makes sense for stop-order. There are 3 stop-order types\n             \"SL\", \"TP\", \"Limit\" for \"Stop loss\", \"Take profit\" and \"Stop limit\" types accordingly.\n             Stop loss order always executed by market price.</li>\n<li><strong>expDate</strong>:  string \"Undefined\" by default or local date in future.\n            String has a format like this: <code>%Y-%m-%d %H:%M:%S</code>.\n            This date is converting to UTC format for server. This parameter only makes sense for stop-order.\n            A limit order has no expiration date, it lasts until the end of the trading day.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>JSON with response from broker server.</p>\n</blockquote>\n", "signature": "(\n    self,\n    operation: str,\n    orderType: str,\n    lots: int,\n    targetPrice: float,\n    limitPrice: float = 0.0,\n    stopType: str = 'Limit',\n    expDate: str = 'Undefined'\n) -> dict", "funcdef": "def"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.BuyLimit", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.BuyLimit", "type": "function", "doc": "<p>Create pending <code>Buy</code> limit-order (below current price). You must specify only 2 parameters:\n<code>lots</code> and <code>target price</code> to open buy limit-order. If you try to create buy limit-order above current price then\nbroker immediately open <code>Buy</code> market order, such as if you do simple <code>--buy</code> operation!\nSee also: <code>Order()</code> docstring.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>lots</strong>:  volume, integer count of lots &gt;= 1.</li>\n<li><strong>targetPrice</strong>:  target price &gt; 0. This is open trade price for limit order.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>JSON with response from broker server.</p>\n</blockquote>\n", "signature": "(self, lots: int, targetPrice: float) -> dict", "funcdef": "def"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.BuyStop", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.BuyStop", "type": "function", "doc": "<p>Create <code>Buy</code> stop-order. You must specify at least 2 parameters: <code>lots</code> <code>target price</code> to open buy stop-order.\nIn additional you can specify 3 parameters for buy stop-order: <code>limit price</code> &gt;=0, <code>stop type</code> = Limit|SL|TP,\n<code>expiration date</code> = Undefined|<code>%%Y-%%m-%%d %%H:%%M:%%S</code>. When current price will go up or down to\ntarget price value then broker opens a limit order. See also: <code>Order()</code> docstring.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>lots</strong>:  volume, integer count of lots &gt;= 1.</li>\n<li><strong>targetPrice</strong>:  target price &gt; 0. This is trigger price for buy stop-order.</li>\n<li><strong>limitPrice</strong>:  limit price &gt;= 0 (limitPrice = targetPrice if limitPrice is 0). Broker will creates limit-order\n               with price equal to limitPrice, when current price goes to target price of buy stop-order.</li>\n<li><strong>stopType</strong>:  string \"Limit\" by default. There are 3 stop-order types \"SL\", \"TP\", \"Limit\"\n             for \"Stop loss\", \"Take profit\" and \"Stop limit\" types accordingly.</li>\n<li><strong>expDate</strong>:  string \"Undefined\" by default or local date in future.\n            String has a format like this: <code>%Y-%m-%d %H:%M:%S</code>.\n            This date is converting to UTC format for server.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>JSON with response from broker server.</p>\n</blockquote>\n", "signature": "(\n    self,\n    lots: int,\n    targetPrice: float,\n    limitPrice: float = 0.0,\n    stopType: str = 'Limit',\n    expDate: str = 'Undefined'\n) -> dict", "funcdef": "def"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.SellLimit", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.SellLimit", "type": "function", "doc": "<p>Create pending <code>Sell</code> limit-order (above current price). You must specify only 2 parameters:\n<code>lots</code> and <code>target price</code> to open sell limit-order. If you try to create sell limit-order below current price then\nbroker immediately open <code>Sell</code> market order, such as if you do simple <code>--sell</code> operation!\nSee also: <code>Order()</code> docstring.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>lots</strong>:  volume, integer count of lots &gt;= 1.</li>\n<li><strong>targetPrice</strong>:  target price &gt; 0. This is open trade price for limit order.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>JSON with response from broker server.</p>\n</blockquote>\n", "signature": "(self, lots: int, targetPrice: float) -> dict", "funcdef": "def"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.SellStop", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.SellStop", "type": "function", "doc": "<p>Create <code>Sell</code> stop-order. You must specify at least 2 parameters: <code>lots</code> <code>target price</code> to open sell stop-order.\nIn additional you can specify 3 parameters for sell stop-order: <code>limit price</code> &gt;=0, <code>stop type</code> = Limit|SL|TP,\n<code>expiration date</code> = Undefined|<code>%%Y-%%m-%%d %%H:%%M:%%S</code>. When current price will go up or down to\ntarget price value then broker opens a limit order. See also: <code>Order()</code> docstring.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>lots</strong>:  volume, integer count of lots &gt;= 1.</li>\n<li><strong>targetPrice</strong>:  target price &gt; 0. This is trigger price for sell stop-order.</li>\n<li><strong>limitPrice</strong>:  limit price &gt;= 0 (limitPrice = targetPrice if limitPrice is 0). Broker will creates limit-order\n               with price equal to limitPrice, when current price goes to target price of sell stop-order.</li>\n<li><strong>stopType</strong>:  string \"Limit\" by default. There are 3 stop-order types \"SL\", \"TP\", \"Limit\"\n             for \"Stop loss\", \"Take profit\" and \"Stop limit\" types accordingly.</li>\n<li><strong>expDate</strong>:  string \"Undefined\" by default or local date in future.\n            String has a format like this: <code>%Y-%m-%d %H:%M:%S</code>.\n            This date is converting to UTC format for server.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>JSON with response from broker server.</p>\n</blockquote>\n", "signature": "(\n    self,\n    lots: int,\n    targetPrice: float,\n    limitPrice: float = 0.0,\n    stopType: str = 'Limit',\n    expDate: str = 'Undefined'\n) -> dict", "funcdef": "def"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.CloseOrders", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.CloseOrders", "type": "function", "doc": "<p>Cancel order or list of orders by its <code>orderId</code> or <code>stopOrderId</code>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>orderIDs</strong>:  list of integers with <code>orderId</code> or <code>stopOrderId</code>.</li>\n<li><strong>allOrdersIDs</strong>:  pre-received lists of all active pending orders.\n                 This avoids unnecessary downloading data from the server.</li>\n<li><strong>allStopOrdersIDs</strong>:  pre-received lists of all active stop orders.</li>\n</ul>\n", "signature": "(\n    self,\n    orderIDs: list,\n    allOrdersIDs: list = None,\n    allStopOrdersIDs: list = None\n) -> None", "funcdef": "def"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.CloseAllOrders", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.CloseAllOrders", "type": "function", "doc": "<p>Gets a list of open pending and stop orders and cancel it all.</p>\n", "signature": "(self) -> None", "funcdef": "def"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.CloseAll", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.CloseAll", "type": "function", "doc": "<p>Close all available (not blocked) opened trades and orders.</p>\n\n<p>Also you can select one or more keywords case insensitive:\n<code>orders</code>, <code>shares</code>, <code>bonds</code>, <code>etfs</code> and <code>futures</code> from <code>TKS_INSTRUMENTS</code> enum to specify trades type.</p>\n\n<p>Currency positions you must closes manually using buy or sell operations, <code>CloseTrades()</code> or <code>CloseAllTrades()</code> methods.</p>\n", "signature": "(self, *args) -> None", "funcdef": "def"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.ParseOrderParameters", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.ParseOrderParameters", "type": "function", "doc": "<p>Parse input dictionary of strings with order parameters and return dictionary with parameters to open all orders.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>operation</strong>:  string \"Buy\" or \"Sell\".</li>\n<li><strong>inputParameters</strong>:  this is dict of strings that looks like this\n   <code>{\"lots\": \"L_int,...\", \"prices\": \"P_float,...\"}</code> where\n   \"lots\" key: one or more lot values (integer numbers) to open with every limit-order\n   \"prices\" key: one or more prices to open limit-orders\n   Counts of values in lots and prices lists must be equals!</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>list of dictionaries with all lots and prices to open orders that looks like this <code>[{\"lot\": lots_1, \"price\": price_1}, {...}, ...]</code></p>\n</blockquote>\n", "signature": "(operation, **inputParameters)", "funcdef": "def"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.IsInPortfolio", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.IsInPortfolio", "type": "function", "doc": "<p>Checks if instrument is in the user's portfolio. Instrument must be defined by <code>ticker</code> (highly priority) or <code>figi</code>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>portfolio</strong>:  dict with user's portfolio data. If <code>None</code>, then requests portfolio from <code>Overview()</code> method.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p><code>True</code> if portfolio contains open position with given instrument, <code>False</code> otherwise.</p>\n</blockquote>\n", "signature": "(self, portfolio: dict = None) -> bool", "funcdef": "def"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.GetInstrumentFromPortfolio", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.GetInstrumentFromPortfolio", "type": "function", "doc": "<p>Returns instrument is in the user's portfolio if it presents there.\nInstrument must be defined by <code>ticker</code> (highly priority) or <code>figi</code>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>portfolio</strong>:  dict with user's portfolio data. If <code>None</code>, then requests portfolio from <code>Overview()</code> method.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>dict with instrument if portfolio contains open position with this instrument, <code>None</code> otherwise.</p>\n</blockquote>\n", "signature": "(self, portfolio: dict = None) -> dict", "funcdef": "def"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.Args", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "Args", "type": "class", "doc": "<p>If <code>Main()</code> function is imported as module, then this class used to convert arguments from **kwargs as object.</p>\n"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.Args.__init__", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "Args.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self, **kwargs)", "funcdef": "def"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.ParseArgs", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "ParseArgs", "type": "function", "doc": "<p>Function get and parse command line keys. See examples: <a href=\"https://tim55667757.github.io/TKSBrokerAPI/\">https://tim55667757.github.io/TKSBrokerAPI/</a></p>\n", "signature": "()", "funcdef": "def"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.Main", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "Main", "type": "function", "doc": "<p>Main function for work with Tinkoff Open API service. It realizes simple logic: get a lot of options and execute one command.</p>\n\n<p>See examples: <a href=\"https://tim55667757.github.io/TKSBrokerAPI/\">https://tim55667757.github.io/TKSBrokerAPI/</a></p>\n", "signature": "(**kwargs)", "funcdef": "def"}, {"fullname": "tksbrokerapi.TKSEnums", "modulename": "tksbrokerapi.TKSEnums", "type": "module", "doc": "<p>Module contains a lot of constants from enums sections of Tinkoff Open API documentation.</p>\n\n<p>About Tinkoff Invest API: <a href=\"https://tinkoff.github.io/investAPI/\">https://tinkoff.github.io/investAPI/</a></p>\n\n<p>Tinkoff Invest API documentation: <a href=\"https://tinkoff.github.io/investAPI/swagger-ui/\">https://tinkoff.github.io/investAPI/swagger-ui/</a></p>\n"}, {"fullname": "tksbrokerapi.TKSEnums.TKS_INSTRUMENTS", "modulename": "tksbrokerapi.TKSEnums", "qualname": "TKS_INSTRUMENTS", "type": "variable", "doc": "<p>Type of instrument for trade methods must be only one of supported types, listed in this constant. Default: <code>[\"Currencies\", \"Shares\", \"Bonds\", \"Etfs\", \"Futures\"]</code></p>\n", "default_value": " = ['Currencies', 'Shares', 'Bonds', 'Etfs', 'Futures']"}, {"fullname": "tksbrokerapi.TKSEnums.TKS_TICKER_ALIASES", "modulename": "tksbrokerapi.TKSEnums", "qualname": "TKS_TICKER_ALIASES", "type": "variable", "doc": "<p>Some aliases instead official tickers for using in CLI. For example, you can use <code>\"USD\"</code> instead of <code>\"USD000UTSTOM\"</code>.</p>\n", "default_value": " = {'USD': 'USD000UTSTOM', 'usd': 'USD000UTSTOM', 'EUR': 'EUR_RUB__TOM', 'eur': 'EUR_RUB__TOM', 'GBP': 'GBPRUB_TOM', 'gbp': 'GBPRUB_TOM', 'CHF': 'CHFRUB_TOM', 'chf': 'CHFRUB_TOM', 'CNY': 'CNYRUB_TOM', 'cny': 'CNYRUB_TOM', 'HKD': 'HKDRUB_TOM', 'hkd': 'HKDRUB_TOM', 'TRY': 'TRYRUB_TOM', 'try': 'TRYRUB_TOM'}"}, {"fullname": "tksbrokerapi.TKSEnums.TKS_TIMEFRAMES", "modulename": "tksbrokerapi.TKSEnums", "qualname": "TKS_TIMEFRAMES", "type": "variable", "doc": "<p>How many minutes in interval and maximum count of candles in one history block returns by Tinkoff API in one request.\nSee more: <a href=\"https://tinkoff.github.io/investAPI/swagger-ui/#/MarketDataService/MarketDataService_GetCandles\">https://tinkoff.github.io/investAPI/swagger-ui/#/MarketDataService/MarketDataService_GetCandles</a></p>\n", "default_value": " = {'1min': {'minutes': 1, 'maxCandles': 1439}, '2min': {'minutes': 2, 'maxCandles': 719}, '3min': {'minutes': 3, 'maxCandles': 479}, '5min': {'minutes': 5, 'maxCandles': 287}, '10min': {'minutes': 10, 'maxCandles': 143}, '15min': {'minutes': 15, 'maxCandles': 95}, '30min': {'minutes': 30, 'maxCandles': 47}, 'hour': {'minutes': 60, 'maxCandles': 167}, 'day': {'minutes': 1440, 'maxCandles': 365}, 'week': {'minutes': 10080, 'maxCandles': 104}, 'month': {'minutes': 43200, 'maxCandles': 119}}"}, {"fullname": "tksbrokerapi.TKSEnums.TKS_TRADING_STATUSES", "modulename": "tksbrokerapi.TKSEnums", "qualname": "TKS_TRADING_STATUSES", "type": "variable", "doc": "<p>Security Trading Status enums in Tinkoff Broker OpenAPI: <a href=\"https://tinkoff.github.io/investAPI/orders/#securitytradingstatus\">https://tinkoff.github.io/investAPI/orders/#securitytradingstatus</a></p>\n", "default_value": " = {'SECURITY_TRADING_STATUS_UNSPECIFIED': 'Trading status undefined', 'SECURITY_TRADING_STATUS_NOT_AVAILABLE_FOR_TRADING': 'Not available for trading', 'SECURITY_TRADING_STATUS_OPENING_PERIOD': 'Trade opening period', 'SECURITY_TRADING_STATUS_CLOSING_PERIOD': 'Trade closing period', 'SECURITY_TRADING_STATUS_BREAK_IN_TRADING': 'Break in trading', 'SECURITY_TRADING_STATUS_NORMAL_TRADING': 'Normal trading', 'SECURITY_TRADING_STATUS_CLOSING_AUCTION': 'Closing auction', 'SECURITY_TRADING_STATUS_DARK_POOL_AUCTION': 'Large package auction', 'SECURITY_TRADING_STATUS_DISCRETE_AUCTION': 'Discrete auction', 'SECURITY_TRADING_STATUS_OPENING_AUCTION_PERIOD': 'Opening auction', 'SECURITY_TRADING_STATUS_TRADING_AT_CLOSING_AUCTION_PRICE': 'Trading period at the closing auction price', 'SECURITY_TRADING_STATUS_SESSION_ASSIGNED': 'Session assigned', 'SECURITY_TRADING_STATUS_SESSION_CLOSE': 'Session closed', 'SECURITY_TRADING_STATUS_SESSION_OPEN': 'Session is open', 'SECURITY_TRADING_STATUS_DEALER_NORMAL_TRADING': \"Broker's internal liquidity mode trading\", 'SECURITY_TRADING_STATUS_DEALER_BREAK_IN_TRADING': \"Break in trading in the broker's internal liquidity mode\", 'SECURITY_TRADING_STATUS_DEALER_NOT_AVAILABLE_FOR_TRADING': \"Broker's internal liquidity mode is not available\"}"}, {"fullname": "tksbrokerapi.TKSEnums.TKS_OPERATION_TYPES", "modulename": "tksbrokerapi.TKSEnums", "qualname": "TKS_OPERATION_TYPES", "type": "variable", "doc": "<p>Operation type enums in Tinkoff Broker OpenAPI: <a href=\"https://tinkoff.github.io/investAPI/operations/#operationtype\">https://tinkoff.github.io/investAPI/operations/#operationtype</a></p>\n", "default_value": " = {'OPERATION_TYPE_UNSPECIFIED': 'The operation type is not defined', 'OPERATION_TYPE_INPUT': 'Deposit on broker account', 'OPERATION_TYPE_BOND_TAX': 'Withholding personal income tax on bond coupons', 'OPERATION_TYPE_OUTPUT_SECURITIES': 'Securities output', 'OPERATION_TYPE_OVERNIGHT': 'Overnight REPO income', 'OPERATION_TYPE_TAX': 'Tax withholding', 'OPERATION_TYPE_BOND_REPAYMENT_FULL': 'Full bond redemption', 'OPERATION_TYPE_SELL_CARD': 'Sell securities from the card', 'OPERATION_TYPE_DIVIDEND_TAX': 'Withholding tax on dividends', 'OPERATION_TYPE_OUTPUT': 'Withdrawals', 'OPERATION_TYPE_BOND_REPAYMENT': 'Bonds partial redemption', 'OPERATION_TYPE_TAX_CORRECTION': 'Tax correction', 'OPERATION_TYPE_SERVICE_FEE': 'Brokerage account maintenance fee deduction', 'OPERATION_TYPE_BENEFIT_TAX': 'Withholding tax for material benefits', 'OPERATION_TYPE_MARGIN_FEE': 'Withholding commission for an uncovered position', 'OPERATION_TYPE_BUY': 'Buy securities', 'OPERATION_TYPE_BUY_CARD': 'Buy securities from a card', 'OPERATION_TYPE_INPUT_SECURITIES': 'Transfer securities from another depository', 'OPERATION_TYPE_SELL_MARGIN': 'Sell (by margin call)', 'OPERATION_TYPE_BROKER_FEE': 'Operation fee deduction', 'OPERATION_TYPE_BUY_MARGIN': 'Buy (by margin call)', 'OPERATION_TYPE_DIVIDEND': 'Dividends income', 'OPERATION_TYPE_SELL': 'Sell securities', 'OPERATION_TYPE_COUPON': 'Coupons income', 'OPERATION_TYPE_SUCCESS_FEE': 'Success fee deduction', 'OPERATION_TYPE_DIVIDEND_TRANSFER': 'Transfer of dividend income', 'OPERATION_TYPE_ACCRUING_VARMARGIN': 'Variation margin crediting', 'OPERATION_TYPE_WRITING_OFF_VARMARGIN': 'Withholding variation margin', 'OPERATION_TYPE_DELIVERY_BUY': 'Buy (futures contract expired)', 'OPERATION_TYPE_DELIVERY_SELL': 'Sell (futures contract expired)', 'OPERATION_TYPE_TRACK_MFEE': 'Autotrack account management fee', 'OPERATION_TYPE_TRACK_PFEE': 'Pay per result on auto follow score', 'OPERATION_TYPE_TAX_PROGRESSIVE': 'Tax withholding at the rate of 15%', 'OPERATION_TYPE_BOND_TAX_PROGRESSIVE': 'Withholding tax on coupons at the rate of 15%', 'OPERATION_TYPE_DIVIDEND_TAX_PROGRESSIVE': 'Withholding tax on dividends at the rate of 15%', 'OPERATION_TYPE_BENEFIT_TAX_PROGRESSIVE': 'Withholding tax for material benefits at the rate of 15%', 'OPERATION_TYPE_TAX_CORRECTION_PROGRESSIVE': 'Tax correction at the rate of 15%', 'OPERATION_TYPE_TAX_REPO_PROGRESSIVE': 'Withholding tax on refunds on REPO transactions at the rate of 15%', 'OPERATION_TYPE_TAX_REPO': 'Tax withholding on REPO trade refunds', 'OPERATION_TYPE_TAX_REPO_HOLD': 'Tax hold on REPO transactions', 'OPERATION_TYPE_TAX_REPO_REFUND': 'Tax refund on REPO transactions', 'OPERATION_TYPE_TAX_REPO_HOLD_PROGRESSIVE': 'Withholding tax on REPO transactions at the rate of 15%', 'OPERATION_TYPE_TAX_REPO_REFUND_PROGRESSIVE': 'Tax refund on REPO transactions at the rate of 15%', 'OPERATION_TYPE_DIV_EXT': 'Payout dividends to the card', 'OPERATION_TYPE_TAX_CORRECTION_COUPON': 'Coupon tax correction'}"}, {"fullname": "tksbrokerapi.TKSEnums.TKS_OPERATION_STATES", "modulename": "tksbrokerapi.TKSEnums", "qualname": "TKS_OPERATION_STATES", "type": "variable", "doc": "<p>Operation state enums  in Tinkoff Broker OpenAPI: <a href=\"https://tinkoff.github.io/investAPI/operations/#operationstate\">https://tinkoff.github.io/investAPI/operations/#operationstate</a></p>\n", "default_value": " = {'OPERATION_STATE_UNSPECIFIED': '! Unknown', 'OPERATION_STATE_EXECUTED': '\u221a Executed', 'OPERATION_STATE_CANCELED': '\u00d7 Canceled'}"}, {"fullname": "tksbrokerapi.TKSEnums.TKS_ORDER_DIRECTIONS", "modulename": "tksbrokerapi.TKSEnums", "qualname": "TKS_ORDER_DIRECTIONS", "type": "variable", "doc": "<p>Order direction enums in Tinkoff Broker OpenAPI: <a href=\"https://tinkoff.github.io/investAPI/orders/#orderdirection\">https://tinkoff.github.io/investAPI/orders/#orderdirection</a></p>\n", "default_value": " = {'ORDER_DIRECTION_UNSPECIFIED': 'Undefined', 'ORDER_DIRECTION_BUY': '\u2191 Buy', 'ORDER_DIRECTION_SELL': '\u2193 Sell'}"}, {"fullname": "tksbrokerapi.TKSEnums.TKS_STOP_ORDER_DIRECTIONS", "modulename": "tksbrokerapi.TKSEnums", "qualname": "TKS_STOP_ORDER_DIRECTIONS", "type": "variable", "doc": "<p>Stop-order direction enums in Tinkoff Broker OpenAPI: <a href=\"https://tinkoff.github.io/investAPI/stoporders/#stoporderdirection\">https://tinkoff.github.io/investAPI/stoporders/#stoporderdirection</a></p>\n", "default_value": " = {'STOP_ORDER_DIRECTION_UNSPECIFIED': 'Undefined', 'STOP_ORDER_DIRECTION_BUY': '\u2191 Buy', 'STOP_ORDER_DIRECTION_SELL': '\u2193 Sell'}"}, {"fullname": "tksbrokerapi.TKSEnums.TKS_ORDER_TYPES", "modulename": "tksbrokerapi.TKSEnums", "qualname": "TKS_ORDER_TYPES", "type": "variable", "doc": "<p>Order type enums in Tinkoff Broker OpenAPI: <a href=\"https://tinkoff.github.io/investAPI/orders/#ordertype\">https://tinkoff.github.io/investAPI/orders/#ordertype</a></p>\n", "default_value": " = {'ORDER_TYPE_UNSPECIFIED': 'Undefined', 'ORDER_TYPE_LIMIT': 'Limit', 'ORDER_TYPE_MARKET': 'Market'}"}, {"fullname": "tksbrokerapi.TKSEnums.TKS_STOP_ORDER_TYPES", "modulename": "tksbrokerapi.TKSEnums", "qualname": "TKS_STOP_ORDER_TYPES", "type": "variable", "doc": "<p>Stop-order type enums in Tinkoff Broker OpenAPI: <a href=\"https://tinkoff.github.io/investAPI/stoporders/#stopordertype\">https://tinkoff.github.io/investAPI/stoporders/#stopordertype</a></p>\n", "default_value": " = {'STOP_ORDER_TYPE_UNSPECIFIED': 'Undefined', 'STOP_ORDER_TYPE_TAKE_PROFIT': 'Take profit', 'STOP_ORDER_TYPE_STOP_LOSS': 'Stop loss', 'STOP_ORDER_TYPE_STOP_LIMIT': 'Stop limit'}"}, {"fullname": "tksbrokerapi.TKSEnums.TKS_ORDER_STATES", "modulename": "tksbrokerapi.TKSEnums", "qualname": "TKS_ORDER_STATES", "type": "variable", "doc": "<p>Order status enums in Tinkoff Broker OpenAPI: <a href=\"https://tinkoff.github.io/investAPI/orders/#orderexecutionreportstatus\">https://tinkoff.github.io/investAPI/orders/#orderexecutionreportstatus</a></p>\n", "default_value": " = {'EXECUTION_REPORT_STATUS_UNSPECIFIED': '! Unknown', 'EXECUTION_REPORT_STATUS_FILL': 'Performed', 'EXECUTION_REPORT_STATUS_REJECTED': 'Rejected', 'EXECUTION_REPORT_STATUS_CANCELLED': 'Cancelled', 'EXECUTION_REPORT_STATUS_NEW': 'New order', 'EXECUTION_REPORT_STATUS_PARTIALLYFILL': 'Partially filled'}"}, {"fullname": "tksbrokerapi.TKSEnums.TKS_STOP_ORDER_EXPIRATION_TYPES", "modulename": "tksbrokerapi.TKSEnums", "qualname": "TKS_STOP_ORDER_EXPIRATION_TYPES", "type": "variable", "doc": "<p>Expiration type of stop-orders enums in Tinkoff Broker OpenAPI: <a href=\"https://tinkoff.github.io/investAPI/stoporders/#stoporderexpirationtype\">https://tinkoff.github.io/investAPI/stoporders/#stoporderexpirationtype</a></p>\n", "default_value": " = {'STOP_ORDER_EXPIRATION_TYPE_UNSPECIFIED': 'Undefined', 'STOP_ORDER_EXPIRATION_TYPE_GOOD_TILL_CANCEL': 'Until cancel', 'STOP_ORDER_EXPIRATION_TYPE_GOOD_TILL_DATE': 'Until date'}"}, {"fullname": "tksbrokerapi.UniLogger", "modulename": "tksbrokerapi.UniLogger", "type": "module", "doc": "<p>This module init standard python logging system with some of pre-defined parameters,\ne.g. debug level for log-file, info level for console, log-rotate and so on.</p>\n"}, {"fullname": "tksbrokerapi.UniLogger.SetLevel", "modulename": "tksbrokerapi.UniLogger", "qualname": "SetLevel", "type": "function", "doc": "<p>This procedure setting up UniLogger verbosity level.</p>\n", "signature": "(vLevel='ERROR')", "funcdef": "def"}, {"fullname": "tksbrokerapi.UniLogger.LevelFilter", "modulename": "tksbrokerapi.UniLogger", "qualname": "LevelFilter", "type": "class", "doc": "<p>Class using to set up log level filtering.</p>\n", "bases": "logging.Filter"}, {"fullname": "tksbrokerapi.UniLogger.LevelFilter.__init__", "modulename": "tksbrokerapi.UniLogger", "qualname": "LevelFilter.__init__", "type": "function", "doc": "<p>Initialize a filter.</p>\n\n<p>Initialize with the name of the logger which, together with its\nchildren, will have its events allowed through the filter. If no\nname is specified, allow every event.</p>\n", "signature": "(self, level)", "funcdef": "def"}, {"fullname": "tksbrokerapi.UniLogger.LevelFilter.filter", "modulename": "tksbrokerapi.UniLogger", "qualname": "LevelFilter.filter", "type": "function", "doc": "<p>Determine if the specified record is to be logged.</p>\n\n<p>Returns True if the record should be logged, or False otherwise.\nIf deemed appropriate, the record may be modified in-place.</p>\n", "signature": "(self, record)", "funcdef": "def"}, {"fullname": "tksbrokerapi.UniLogger.EnableLogger", "modulename": "tksbrokerapi.UniLogger", "qualname": "EnableLogger", "type": "function", "doc": "<p>Adding new file logger with rotation.</p>\n", "signature": "(\n    logFile,\n    parentHandler=<Logger UniLogger (DEBUG)>,\n    useFormat=<logging.Formatter object>\n)", "funcdef": "def"}, {"fullname": "tksbrokerapi.UniLogger.DisableLogger", "modulename": "tksbrokerapi.UniLogger", "qualname": "DisableLogger", "type": "function", "doc": "<p>Disable given file logger.</p>\n", "signature": "(handler, parentHandler=<Logger UniLogger (DEBUG)>)", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();